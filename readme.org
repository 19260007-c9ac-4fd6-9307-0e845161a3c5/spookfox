* Spookfox

Communicate between Firefox and Emacs. Because [[https://nyxt.atlas.engineer/][Nyxt]] is just not there yet.

Spookfox has 3 primary components:
1. *spookfox.el*: Emacs package written in Emacs Lisp
2. *spookfox-addon*: Firefox extension written in Javascript
3. *spookfox-native*: Glue code written in Rust

Firefox extension uses Native Messaging, which require an executable which
accepts input from stdin, and provides its output at stdout. Emacs itself proved
unusable for that purpose. So I've written some glue code which communicates
with the Browser.

** Features

1. *Get active tab*

   #+begin_src elisp
     (sf--get-active-tab)
     ;; (:title "gnu.org/software/emacs/manual/html_node/elisp/Filter-Functions.html"
     ;;  :url "https://www.gnu.org/software/emacs/manual/html_node/elisp/Filter-Functions.html")
   #+end_src

   I use this to quickly capture notes for what I am reading in Firefox.

** Architecture

*** Components
1. <<sn>> : spookfox-native : Rust side
2. <<sa>> : spookfox-addon : Firefox side
3. <<se>> : spookfox-el : Emacs side
4. <<ss>> : spookfox-socket : A UNIX socket used for IPC b/w [[se]] and [[sn]]

*** Flow

- [[sa]] starts [[sn]] on browser startup.

  [[sn]] is now a running process to which browser communicates via =stdin= and
  =stdout=. Anything [[sn]] prints become a message [[sa]] receives and tries to
  interpret as a command.

**** Emacs sending commands to Firefox

- [[sn]] spawns a thread which connects to [[ss]] for messages to/from Emacs
- [[se]] connects to [[ss]]
- Emacs receives input from User to execute a command in browser
- [[se]] create a JSON string (referred to as =msg=) and sends it to [[ss]]
- [[sn]] reads =msg= on [[ss]]
- [[sn]] prints the =msg= as-is to stdout, to which [[sa]] is listening
- [[sa]] receives =msg=
  - parses it
  - executes it
  - post a response back to [[sn]]
- [[sn]] receives the response from [[sa]] and passes it to [[ss]]
- [[se]] now has the response (received over [[ss]]) of message it sent to browser
