{"mappings":"MA0CA,MAAMA,EAAkBC,IACf,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAIG,IACTC,SAAUJ,EAAIK,SAaZC,EAAUC,gBACKC,QAAQC,KAAKC,MAAM,CAAEC,eAAe,KAE3CC,IAAIb,GAGZc,EAAON,MAAUO,IACrB,IAAId,EAAM,KACV,IACEA,EAAMc,EAAEC,aAAgBP,QAAQC,KAAKO,IAAIC,SAASH,EAAEC,MAAO,KAC3D,MAAOG,IAUT,OANIlB,EACFQ,QAAQC,KAAKU,OAAOnB,EAAIC,GAAI,CAAEmB,QAAQ,IAEtCZ,QAAQC,KAAKY,OAAO,CAAElB,IAAKW,EAAEX,MAGxB,IAeHmB,EAEF,CACFC,eA/CgBhB,UAChB,MAAME,QAAaD,QAAQC,KAAKC,MAAM,CAAEC,eAAe,EAAMS,QAAQ,IACrE,OAAKX,EAAKe,OAIHzB,EAAeU,EAAK,IAHlB,CAAEgB,KAAM,QAASC,QAAS,yBA6CnCC,aAAcrB,EACdsB,SAAUf,EACVgB,UAlBYtB,MAAUE,IACtBA,EAAKqB,QAAQjB,GAEN,IAgBPkB,WAbaxB,MAAUO,IACvBN,QAAQwB,OAAOA,OAAO,CAAEtB,MAAOI,IAExB,KAaC,MACR,MAAMmB,EAAOzB,QAAQ0B,QAAQC,cAAc,YAE3CF,EAAKG,aAAaC,aAAavB,IAC7BwB,QAAQC,IAAI,gCACRzB,EAAE0B,OACJF,QAAQE,MAAM,4BAA6B1B,EAAE0B,UAIjDP,EAAKQ,UAAUJ,aAAW9B,MAAQmC,IAChC,GAAiB,UAAbA,EAAIjB,KAKR,GAAKiB,EAAIC,QAKT,IACE,MAAMC,EAAmBC,KAAKC,MAAMJ,EAAIC,SAClCI,EAAczB,EAAYsB,EAAOnB,MAEvC,GAAIsB,EAAa,CACf,MAAML,QAAYK,EAAYH,EAAOD,SACrC,OAAOV,EAAKe,YAAYN,GAExBJ,QAAQW,KAAI,0BAA2BJ,KAAKK,UAAUN,OAExD,MAAO1B,GACPoB,QAAQE,MAAK,4BAA6BtB,UAAYwB,EAAIC,iBAf1DL,QAAQW,KAAK,mBAAoBP,QALjCJ,QAAQE,MAAM,wCAAyCE,EAAIC,QAAS,QAwBxEnC,QAAQ2C,cAAcC,UAAUf,aAAW9B,UACzC+B,QAAQW,KAAK,aAAc3C,SAI/B+C","sources":["src/background.ts"],"sourcesContent":["interface SFMessage {\n  type: 'Success' | 'Error';\n  payload: string;\n  sender: string;\n}\n\ninterface OpenTabActionPayload {\n  url?: string;\n  tabId?: string; // It should be a number, but JSON.parse(payload) don't convert it. Let's go with it being a string for now.\n  tags?: string[];\n}\n\ntype SearchActionPayload = string;\n\ntype OpenTabsActionPayload = OpenTabActionPayload[];\n\ntype ActionPayload =\n  | OpenTabActionPayload\n  | SearchActionPayload\n  | OpenTabsActionPayload;\n\ninterface SFAction {\n  type: string;\n  payload: ActionPayload;\n}\n\ninterface Tab {\n  id: number;\n  title: string;\n  url: string;\n  isPinned: boolean;\n}\n\ninterface SFErrorMessage {\n  type: 'Error';\n  message: string;\n}\n\ntype Result<R> = SFErrorMessage | R;\ntype ActionResponse = object;\ntype ActionResult = Result<ActionResponse>;\n\nconst fromBrowserTab = (tab: browser.tabs.Tab): Tab => {\n  return {\n    id: tab.id,\n    title: tab.title,\n    url: tab.url,\n    isPinned: tab.pinned,\n  };\n};\n\nconst getActiveTab = async (): Promise<ActionResult> => {\n  const tabs = await browser.tabs.query({ currentWindow: true, active: true });\n  if (!tabs.length) {\n    return { type: 'Error', message: 'No active tabs found' };\n  }\n\n  return fromBrowserTab(tabs[0]);\n};\n\nconst getAllTabs = async () => {\n  const tabs = await browser.tabs.query({ currentWindow: true });\n\n  return tabs.map(fromBrowserTab);\n};\n\nconst openTab = async (p: OpenTabActionPayload) => {\n  let tab = null;\n  try {\n    tab = p.tabId && (await browser.tabs.get(parseInt(p.tabId, 10)));\n  } catch (err) {\n    // pass\n  }\n\n  if (tab) {\n    browser.tabs.update(tab.id, { active: true });\n  } else {\n    browser.tabs.create({ url: p.url });\n  }\n\n  return {};\n};\n\nconst openTabs = async (tabs: OpenTabsActionPayload) => {\n  tabs.forEach(openTab);\n\n  return {};\n};\n\nconst searchFor = async (p: string) => {\n  browser.search.search({ query: p });\n\n  return {};\n};\n\nconst actionsRepo: {\n  [actionType: string]: (payload: ActionPayload) => Promise<ActionResult>;\n} = {\n  GET_ACTIVE_TAB: getActiveTab,\n  GET_ALL_TABS: getAllTabs,\n  OPEN_TAB: openTab,\n  OPEN_TABS: openTabs,\n  SEARCH_FOR: searchFor,\n};\n\nconst init = () => {\n  const port = browser.runtime.connectNative('spookfox');\n\n  port.onDisconnect.addListener((p) => {\n    console.log('Disconnected from Native APP');\n    if (p.error) {\n      console.error('Disconnected due to error', p.error);\n    }\n  });\n\n  port.onMessage.addListener(async (msg: SFMessage) => {\n    if (msg.type === 'Error') {\n      console.error('spookfox-native faced an error, [err=', msg.payload, ']');\n      return;\n    }\n\n    if (!msg.payload) {\n      console.warn('Unknown message:', msg);\n      return;\n    }\n\n    try {\n      const action: SFAction = JSON.parse(msg.payload);\n      const executioner = actionsRepo[action.type];\n\n      if (executioner) {\n        const msg = await executioner(action.payload);\n        return port.postMessage(msg);\n      } else {\n        console.warn(`Unknown action [action=${JSON.stringify(action)}]`);\n      }\n    } catch (err) {\n      console.error(`Bad message payload [err=${err}, msg=${msg.payload}]`);\n    }\n  });\n\n  browser.browserAction.onClicked.addListener(async () => {\n    console.warn('TABS', await getAllTabs());\n  });\n};\n\ninit();\n"],"names":["$f38e5b3eeb655060$var$fromBrowserTab","tab","id","title","url","isPinned","pinned","$f38e5b3eeb655060$var$getAllTabs","async","browser","tabs","query","currentWindow","map","$f38e5b3eeb655060$var$openTab","p","tabId","get","parseInt","err","update","active","create","$f38e5b3eeb655060$var$actionsRepo","GET_ACTIVE_TAB","length","type","message","GET_ALL_TABS","OPEN_TAB","OPEN_TABS","forEach","SEARCH_FOR","search","port","runtime","connectNative","onDisconnect","addListener","console","log","error","onMessage","msg","payload","action","JSON","parse","executioner","postMessage","warn","stringify","browserAction","onClicked","$f38e5b3eeb655060$var$init"],"version":3,"file":"background.js.map"}